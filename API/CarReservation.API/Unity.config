<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=6d32ff45e0ccc69f"/>
  </configSections>

  <unity>

    <!--<sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />-->

    <!-- Start RequestInfo context type alias -->
    <!--<alias alias="IRequestInfo" type="YellowZebra.Core.Infrastructure.IRequestInfo, YellowZebra.Core" />
    <alias alias="RequestInfo" type="YellowZebra.API.Infrastructure.RequestInfo, YellowZebra.API" />

    <alias alias="ITenantRequestInfo" type="YellowZebra.Core.Infrastructure.ITenantRequestInfo, YellowZebra.Core" />
    <alias alias="TenantRequestInfo" type="YellowZebra.API.Infrastructure.TenantRequestInfo, YellowZebra.API" />

    <alias alias="IRepositoryRequisites" type="YellowZebra.Core.Infrastructure.IRepositoryRequisites, YellowZebra.Core" />
    <alias alias="RepositoryRequisites" type="YellowZebra.Core.Infrastructure.RepositoryRequisites, YellowZebra.Core" />

    <alias alias="ICache" type="YellowZebra.Core.Infrastructure.ICache, YellowZebra.Core" />
    <alias alias="Cache" type="YellowZebra.Core.Infrastructure.Cache, YellowZebra.Core" />

    <alias alias="DataProvider" type="YellowZebra.Core.Infrastructure.DataProvider, YellowZebra.Core" />-->
    <!-- End RequestInfo context type alias -->

    <!-- Start User-defined type alias for UnitOfWork -->
    <!--<alias alias="IUnitOfWork" type="YellowZebra.Core.IRepository.IUnitOfWork, YellowZebra.Core" />
    <alias alias="UnitOfWork" type="YellowZebra.Repository.Tenant.UnitOfWork, YellowZebra.Repository" />

    <alias alias="IUnitOfWorkTenantConfig" type="YellowZebra.Core.IRepository.IUnitOfWorkTenantConfig, YellowZebra.Core" />
    <alias alias="UnitOfWorkTenantConfig" type="YellowZebra.Repository.TenantConfig.UnitOfWorkTenantConfig, YellowZebra.Repository" />-->
    <!-- End User-defined type alias for UnitOfWork -->

    <!-- Start User-defined type aliases for Repositories -->
    <!--<alias alias="ITaxonomyRepository" type="YellowZebra.Core.IRepository.ITaxonomyRepository, YellowZebra.Core" />
    <alias alias="TaxonomyRepository" type="YellowZebra.Repository.Tenant.TaxonomyRepository, YellowZebra.Repository" />-->
    <!-- End User-defined type aliases for Repositories -->

    <!-- Start User-defined type aliases for Services -->
    <!--<alias alias="ITaxonomyService" type="YellowZebra.Core.IService.ITaxonomyService, YellowZebra.Core" />
    <alias alias="TaxonomyService" type="YellowZebra.Service.Tenant.TaxonomyService, YellowZebra.Service" />-->
    <!-- End User-defined type aliases for Services -->

    <container>
      <!--<extension type="Interception" />-->
      <!--<register type="IRequestInfo" mapTo="RequestInfo" />
      <register type="ITenantRequestInfo" mapTo="TenantRequestInfo" />
      <register type="IRepositoryRequisites" mapTo="RepositoryRequisites" />
      <register type="ICache" mapTo="Cache" />
      <register type="DataProvider" mapTo="DataProvider">
        <lifetime type="singleton"/>
      </register>
      <register type="IUnitOfWork" mapTo="UnitOfWork" />
      <register type="IUnitOfWorkTenantConfig" mapTo="UnitOfWorkTenantConfig" />
      <register type="ITaxonomyRepository" mapTo="TaxonomyRepository" />
      <register type="ITaxonomyAssociationRepository" mapTo="TaxonomyAssociationRepository" />
      <register type="IProjectRepository" mapTo="ProjectRepository" />
      <register type="IOrganizationHolidayRepository" mapTo="OrganizationHolidayRepository" />-->
      <!--<register type="IBudgetItemsTypeRepository" mapTo="BudgetItemsTypeRepository" />--><!--
      <register type="IBudgetItemRepository" mapTo="BudgetItemRepository" />
      <register type="IExpenseRepository" mapTo="ExpenseRepository" />
      <register type="IAspNetRolesRepository" mapTo="AspNetRolesRepository" />
      <register type="IUserRepository" mapTo="UserRepository"/>
      <register type="IEmployeeRepository" mapTo="EmployeeRepository"/>
      <register type="ITaskRepository" mapTo="TaskRepository"/>
      <register type="IWorkTypeRepository" mapTo="WorkTypeRepository"/>
      <register type="ICountryRepository" mapTo="CountryRepository"/>
      <register type="IEmployeeRepository" mapTo="EmployeeRepository"/>
      <register type="IEmployeeStatusRepository" mapTo="EmployeeStatusRepository"/>
      <register type="IUserInvitationRepository" mapTo="UserInvitationRepository"/>
      <register type="IAuthRepository" mapTo="AuthRepository"/>
      <register type="ITenantRepository" mapTo="TenantRepository"/>
      <register type="ITimeSheetEntryRepository" mapTo="TimeSheetEntryRepository"/>
      <register type="IWorkAssignmentRepository" mapTo="WorkAssignmentRepository" />
      <register type="IBillRateRepository" mapTo="BillRateRepository" />
      <register type="IAuditRepository" mapTo="AuditRepository" />

      <register type="ITaskCommentRepository" mapTo="TaskCommentRepository" />
      <register type="IEmployeeTaskRepository" mapTo="EmployeeTaskRepository" />
      <register type="IAvalibilityRepository" mapTo="AvalibilityRepository" />
      <register type="IActivityLogRepository" mapTo="ActivityLogRepository" />

      <register type="IProjectService" mapTo="ProjectService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IEmployeeService" mapTo="EmployeeService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IAspNetRoleService" mapTo="AspNetRoleService"/>
      <register type="ITaxonomyAssociationService" mapTo="TaxonomyAssociationService"/>
      <register type="IUserService" mapTo="UserService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IWorkAssignmentService" mapTo="WorkAssignmentService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IBillRateService" mapTo="BillRateService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>

      <register type="IOrganizationHolidayService" mapTo="OrganizationHolidayService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      --><!--<register type="IBudgetItemsTypeService" mapTo="BudgetItemsTypeService" />--><!--
      <register type="IBudgetItemService" mapTo="BudgetItemService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IExpenseService" mapTo="ExpenseService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IAvalibilityService" mapTo="AvalibilityService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IEmployeeService" mapTo="EmployeeService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IEmployeeStatusService" mapTo="EmployeeStatusService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IOrganizationHolidayService" mapTo="OrganizationHolidayService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="ITaskService" mapTo="TaskService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IEmployeeUserService" mapTo="EmployeeUserService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IActivityLogService" mapTo="ActivityLogService" />
      <register type="IAuditService" mapTo="AuditService" />
      <register type="ITaxonomyService" mapTo="TaxonomyService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IUserService" mapTo="UserService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="ITimeSheetEntryService" mapTo="TimeSheetEntryService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IWorkTypeService" mapTo="WorkTypeService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="ICountryService" mapTo="CountryService">
        <interceptor type="InterfaceInterceptor" />
        <interceptionBehavior type="YellowZebra.Core.Aspect.AuditLoggingAroundAdvice, YellowZebra.Core" />
      </register>
      <register type="IAuthService" mapTo="AuthService"/>
      <register type="IConfigurationService" mapTo="ConfigurationService"/>
      <register type="ICommonService" mapTo="CommonService" />-->
    </container>
  </unity>
</configuration>
